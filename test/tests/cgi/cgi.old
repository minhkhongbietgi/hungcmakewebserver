/*
    cgi.tst - CGI tests
 */

const HTTP = App.config.uris.http || "127.0.0.1:4100"
let http: Http = new Http

let dotcgi = (!global.test || test.hostOs != "VXWORKS")
let vxworks = (!global.test || test.hostOs == "VXWORKS")

load("cgi.es")

function forms() {
    //  Test various forms to invoke cgi programs
    http.get(HTTP + "/cgi-bin/cgiProgram")
    assert(http.status == 200)
    contains(http, "cgiProgram: Output")

    if (dotcgi) {
        http.get(HTTP + "/cgiProgram.cgi")
        assert(http.status == 200)
        contains(http, "cgiProgram: Output")
    }

    if (App.test.os == "WIN") {
        http.get(HTTP + "/cgi-bin/cgiProgram.exe")
        assert(http.status == 200)
        contains(http, "cgiProgram: Output")

        //  Test #!cgiProgram 
        http.get(HTTP + "/cgi-bin/test")
        assert(http.status == 200)
        contains(http, "cgiProgram: Output")

        http.get(HTTP + "/cgi-bin/test.bat")
        assert(http.status == 200)
        contains(http, "cgiProgram: Output")
    }

    http.get(HTTP + "/cgi-bin/testScript")
    assert(http.status == 200)
    contains(http, "cgiProgram: Output")
}

function alias() {
    http.get(HTTP + "/MyScripts/cgiProgram")
    assert(http.status == 200)
    contains(http, "cgiProgram: Output")
    match(http, "SCRIPT_NAME", "/MyScripts/cgiProgram")
    match(http, "PATH_INFO", "")
    match(http, "PATH_TRANSLATED", "")

    if (dotcgi) {
        http.get(HTTP + "/YourScripts/cgiProgram.cgi")
        assert(http.status == 200)
        contains(http, "cgiProgram: Output")
    }
}

function extraPath() {
    if (dotcgi) {
        http.get(HTTP + "/cgiProgram.cgi")
        assert(http.status == 200)
        match(http, "PATH_INFO", "")
        match(http, "PATH_TRANSLATED", "")

        http.get(HTTP + "/cgiProgram.cgi/extra/path")
        match(http, "PATH_INFO", "/extra/path")
        let scriptFilename = keyword(http, "SCRIPT_FILENAME")
        let path = Path(scriptFilename).dirname.join("extra/path")
        let translated = Path(keyword(http, http, "PATH_TRANSLATED"))
        assert(path == translated)
    }
}

function query() {
    if (!dotcgi) {
        return
    }
/*
    http.get(HTTP + "/cgiProgram.cgi/extra/path?a=b&c=d&e=f")
    match(http, "SCRIPT_NAME", "/cgiProgram.cgi")
    match(http, "PATH_INFO", "/extra/path")
    contains(http, "QVAR a=b")
    contains(http, "QVAR c=d")
*/

    http.get(HTTP + "/cgiProgram.cgi?a+b+c")
    match(http, "QUERY_STRING", "a+b+c")
    contains(http, "QVAR a b c")

    //
    //  Query string vars should not be turned into variables for GETs
    //  Extra path only supported for cgi programs with extensions.
    //
    http.get(HTTP + "/cgiProgram.cgi/extra/path?var1=a+a&var2=b%20b&var3=c")
    match(http, "SCRIPT_NAME", "/cgiProgram.cgi")
    match(http, "QUERY_STRING", "var1=a+a&var2=b%20b&var3=c")
    match(http, "QVAR var1", "a a")
    match(http, "QVAR var2", "b b")
    match(http, "QVAR var3", "c")

    //
    //  Post data should be turned into variables
    //
    http.form(HTTP + "/cgiProgram.cgi/extra/path?var1=a+a&var2=b%20b&var3=c", 
        { name: "Peter", address: "777 Mulberry Lane" })
    match(http, "QUERY_STRING", "var1=a+a&var2=b%20b&var3=c")
    match(http, "QVAR var1", "a a")
    match(http, "QVAR var2", "b b")
    match(http, "QVAR var3", "c")
    match(http, "PVAR name", "Peter")
    match(http, "PVAR address", "777 Mulberry Lane")
}

function args() {
    //
    //  Note: args are split at '+' characters and are then shell character encoded. Typical use is "?a+b+c+d
    //
    http.get(HTTP + "/cgi-bin/cgiProgram")
    assert(keyword(http, "ARG[0]").contains("cgiProgram"))
    assert(!http.response.contains("ARG[1]"))

    if (dotcgi) {
        http.get(HTTP + "/cgiProgram.cgi/extra/path")
        assert(keyword(http, "ARG[0]").contains("cgiProgram"))
        assert(!http.response.contains("ARG[1]"))

        http.get(HTTP + "/cgiProgram.cgi/extra/path?a+b+c")
        match(http, "QUERY_STRING", "a+b+c")
        assert(keyword(http, "ARG[0]").contains("cgiProgram"))
        match(http, "ARG.1.", "a")
        match(http, "ARG.2.", "b")
        match(http, "ARG.3.", "c")
    }

    http.get(HTTP + "/cgi-bin/cgiProgram?var1=a+a&var2=b%20b&var3=c")
    match(http, "QUERY_STRING", "var1=a+a&var2=b%20b&var3=c")
}

function encoding() {
    http.get(HTTP + "/cgiProgram.cgi/extra%20long/a/../path|/a/..?var%201=value%201")
    match(http, "QUERY_STRING", "var%201=value%201")
    match(http, "SCRIPT_NAME", "/cgiProgram.cgi")
    match(http, "QVAR var 1", "value 1")
    match(http, "PATH_INFO", "/extra long/path|/")

    let scriptFilename = keyword(http, "SCRIPT_FILENAME")
    let path = Path(scriptFilename).dirname.join("extra long/path|")
    let translated = Path(keyword(http, "PATH_TRANSLATED"))
    assert(path == translated)

    if (!vxworks) {
        /* VxWorks doesn't have "cgi Program" installed */
        http.get(HTTP + "/cgi-bin/cgi%20Program?var%201=value%201")
        match(http, "QUERY_STRING", "var%201=value%201")
        match(http, "SCRIPT_NAME", "/cgi-bin/cgi Program")
        match(http, "QVAR var 1", "value 1")
    }
}

function status() {
    let http = new Http
    http.setHeader("SWITCHES", "-s%20711")
    http.get(HTTP + "/cgi-bin/cgiProgram")
    assert(http.status == 711)
    http.close()
}

function location() {
    let http = new Http
    http.setHeader("SWITCHES", "-l%20/index.html")
    http.followRedirects = false
    http.get(HTTP + "/cgi-bin/cgiProgram")
    assert(http.status == 302)
    http.close()
}

//  Non-parsed header
function nph() {
    if (!vxworks) {
        /* VxWorks doesn't have "nph-cgiProgram" */
        let http = new Http
        http.setHeader("SWITCHES", "-n")
        http.get(HTTP + "/cgi-bin/nph-cgiProgram")
        assert(http.status == 200)
        assert(http.header("X-CGI-CustomHeader") == "Any value at all")
    }
}

function quoting() {
    http.get(HTTP + "/cgi-bin/testScript?a+b+c")
    match(http, "QUERY_STRING", "a+b+c")
    match(http, "QVAR a b c", "")

    http.get(HTTP + "/cgi-bin/testScript?a=1&b=2&c=3")
    match(http, "QUERY_STRING", "a=1&b=2&c=3")
    match(http, "QVAR a", "1")
    match(http, "QVAR b", "2")
    match(http, "QVAR c", "3")

    http.get(HTTP + "/cgi-bin/testScript?a%20a=1%201+b%20b=2%202")
    match(http, "QUERY_STRING", "a%20a=1%201+b%20b=2%202")
    match(http, "QVAR a a", "1 1 b b=2 2")

    http.get(HTTP + "/cgi-bin/testScript?a%20a=1%201&b%20b=2%202")
    match(http, "QUERY_STRING", "a%20a=1%201&b%20b=2%202")
    match(http, "QVAR a a", "1 1")
    match(http, "QVAR b b", "2 2")

    http.get(HTTP + "/cgi-bin/testScript?a|b+c>d+e?f+g>h+i'j+k\"l+m%20n")
    match(http, "ARG.2.", "a\\|b")
    match(http, "ARG.3.", "c\\>d")
    match(http, "ARG.4.", "e\\?f")
    match(http, "ARG.5.", "g\\>h")
    match(http, "ARG.6.", "i\\'j")

    if (Config.OS == "windows" || Config.OS == "cygwin") {
        //  TODO - fix. Windows is eating a backslash
        match(http, "ARG.7.", "k\"l")
    } else {
        match(http, "ARG.7.", "k\\\"l")
    }
    match(http, "ARG.8.", "m n")
    match(http, "QUERY_STRING", "a|b+c>d+e?f+g>h+i'j+k\"l+m%20n")
    assert(http.response.contains("QVAR a|b c>d e?f g>h i'j k\"l m n"))
}
/*
    MOB?
    forms()
    alias()
    extraPath()
*/
query()
args()
encoding()
status()
location()
nph()
quoting()
